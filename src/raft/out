Test (2A): election after network failure ...
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func RequestVote: begin
after connect leader2, leader: 0
  ... Passed --   5.5  3  124   25022    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: follower term: 2
after connect leader1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: candidate term: 5
after 2s, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 2 candidate.Term: 4
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: follower term: 7
after connect leader2, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 2
after connect leader2, leader: 1
  ... Passed --   5.0  3  135   27367    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: leader term: 2
after connect leader1, rf: 0 state: follower term: 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 2 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term == args.Term and rf has not vote
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
after disconnect two, rf: 0 state: follower term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: leader term: 2
after 2s, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 5
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 0 candidate.Term: 6
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: leader term: 2
after connect leader2, rf: 0 state: follower term: 7
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor 1 candidate: 0 candidate.Term: 5
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2, leader: 1
  ... Passed --   4.5  3   73   14248    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func heartbeat2, begin
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 2
after connect leader1, rf: 1 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 1
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: candidate term: 5
after 2s, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: leader term: 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 0 candidate.Term: 6
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: follower term: 7
after connect leader2, rf: 1 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries, begin
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 7 , state is candidate
in func LeaderElection: rf: 0 term: 7
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: begin
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
after connect leader2, leader: 2
  ... Passed --   5.2  3  137   26549    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 0 term is 8 , state = candidate case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func heartbeat2, begin
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 5
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.4  3   92   17870    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: leader term: 2
after connect leader1, rf: 0 state: follower term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
after disconnect two, rf: 0 state: follower term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func heartbeat2, begin
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: leader term: 2
after 2s, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 5
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 0 candidate.Term: 6
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: leader term: 2
after connect leader2, rf: 0 state: follower term: 7
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2, leader: 1
  ... Passed --   5.5  3  118   24502    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2, begin
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: leader term: 1
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
after 2s, rf: 0 state: leader term: 1
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 1
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 1
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: candidate term: 6
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: begin
after connect leader2, leader: 1
  ... Passed --   5.5  3   96   19614    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = candidate case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: leader term: 2
after connect leader1, rf: 0 state: follower term: 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
after disconnect two, rf: 0 state: follower term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: leader term: 2
after 2s, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 0 candidate.Term: 6
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 6 vote or not: false
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: leader term: 2
after connect leader2, rf: 0 state: follower term: 7
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2, leader: 1
  ... Passed --   5.0  3  129   25300    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: follower term: 2
after connect leader1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
leader2 0
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: candidate term: 5
after 2s, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 1 candidate.Term: 6
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 6 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 6 vote or not: true become leader
in func Make: raft is 1 term is 6 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 6 , state is leader
in func Make: raft is 1 term is 6 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 6
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 6 leader: 1 leader.Term 6
in func Make: raft is 2 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 6 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 6 , state is leader
in func Make: raft is 1 term is 6 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 6
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 6 leader: 1 leader.Term 6
in func Make: raft is 2 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 6 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
in func Make: outside state, raft is 1 term is 6 , state is leader
in func Make: raft is 1 term is 6 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 6
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 6 leader: 1 leader.Term 6
in func Make: raft is 2 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 6 , state is follower
in func Make: outside state, raft is 1 term is 6 , state is leader
in func Make: raft is 1 term is 6 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 6
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 6 leader: 1 leader.Term 6
in func Make: raft is 2 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 6 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 6
after connect leader2, rf: 2 state: follower term: 6
after connect leader2, rf: 0 state: leader term: 2
in func Make: outside state, raft is 1 term is 6 , state is leader
in func Make: raft is 1 term is 6 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 6
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 6 leader: 1 leader.Term 6
in func Make: raft is 2 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 6 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 6 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 1 term is 6 , state is leader
in func Make: raft is 1 term is 6 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 6
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 6 leader: 1 leader.Term 6
in func Make: raft is 2 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 6 , state is follower
in func Make: outside state, raft is 1 term is 6 , state is leader
in func Make: raft is 1 term is 6 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 6
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 6 leader: 1 leader.Term 6
in func Make: raft is 2 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 6 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 6 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 6 , state is follower
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 6 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 6 , state is follower
after connect leader2, leader: 1
  ... Passed --   5.5  3  152   31698    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 6 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 0 candidate.Term: 4
in func Make: raft is 2 term is 5 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 2 candidate.Term: 6
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 6
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.6  3  145   30610    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func heartbeat2, begin
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: leader term: 2
after connect leader1, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 0
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
after disconnect two, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: leader term: 2
after 2s, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 5
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 1 candidate.Term: 6
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: leader term: 2
after connect leader2, rf: 1 state: follower term: 7
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 6
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor 2 candidate: 1 candidate.Term: 3
after connect leader2, leader: 2
  ... Passed --   4.9  3  137   26719    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func heartbeat2, begin
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func heartbeat2, begin
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 5 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 5 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 2 candidate.Term: 6
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func RequestVote: begin
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 7 , state is candidate
in func LeaderElection: rf: 2 term: 7
in func RequestVote: begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 8 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is candidate
in func LeaderElection: rf: 2 term: 8
in func RequestVote: begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 9 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 9 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 9 , state is candidate
in func LeaderElection: rf: 2 term: 9
in func RequestVote: begin
in func RequestVote: begin
after connect leader2, leader: 0
  ... Passed --   5.4  3  133   26323    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 10 , state = candidate case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: leader term: 2
after connect leader1, rf: 1 state: follower term: 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 0
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
after disconnect two, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: leader term: 2
after 2s, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 2 candidate.Term: 5
in func Make: raft is 1 term is 5 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 1 candidate.Term: 6
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: leader term: 2
after connect leader2, rf: 1 state: follower term: 7
in func AppendEntries, begin
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
after connect leader2, leader: 2
  ... Passed --   5.0  3  113   21823    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2, begin
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: leader term: 1
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func heartbeat2, begin
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
after 2s, rf: 0 state: leader term: 1
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: leader term: 1
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func RequestVote: begin
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 1
after connect leader2, rf: 1 state: candidate term: 6
after connect leader2, rf: 2 state: leader term: 2
in func RequestVote: begin
in func RequestVote: begin
after connect leader2, leader: 2
  ... Passed --   4.6  3   58   10850    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 1 term is 6 , state = candidate case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 2
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 0 candidate.Term: 3
in func Make: raft is 1 term is 5 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 1 candidate.Term: 6
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 6 vote or not: false
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func heartbeat2, begin
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.1  3  153   30424    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 2 rf.votedFor 2 candidate: 0 candidate.Term: 2
in func RequestVote: begin
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: false
in func RequestVote: voter: 0 rf.term: 2 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term == args.Term and rf has not vote
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: leader term: 2
after connect leader1, rf: 0 state: follower term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
after disconnect two, rf: 0 state: follower term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: leader term: 2
after 2s, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 5
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 0 candidate.Term: 6
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 6 vote or not: false
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: leader term: 2
after connect leader2, rf: 0 state: follower term: 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func heartbeat2, begin
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
after connect leader2, leader: 1
  ... Passed --   5.4  3  134   26726    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 2
after connect leader1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: candidate term: 5
after 2s, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: leader term: 2
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 5 rf.votedFor 0 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: follower term: 7
after connect leader2, rf: 1 state: leader term: 2
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 3
in func Make: raft is 0 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2, leader: 2
  ... Passed --   5.5  3  147   29951    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 2
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.5  3  150   30661    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: leader term: 2
after connect leader1, rf: 1 state: follower term: 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 0
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
after disconnect two, rf: 1 state: follower term: 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: leader term: 2
after 2s, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor 2 candidate: 1 candidate.Term: 5
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: leader term: 2
after connect leader2, rf: 1 state: follower term: 7
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 3
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 2
  ... Passed --   5.0  3   72   12875    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: follower term: 2
after connect leader1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: candidate term: 5
after 2s, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 2 candidate.Term: 3
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: follower term: 7
after connect leader2, rf: 0 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func RequestVote: begin
after connect leader2, leader: 1
  ... Passed --   5.0  3  132   26727    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 2 candidate.Term: 6
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 3
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 4
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 3
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.0  3  132   26437    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 2
after connect leader1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: candidate term: 5
after 2s, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 5 rf.votedFor 0 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: follower term: 7
after connect leader2, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries, begin
after connect leader2, leader: 2
  ... Passed --   5.5  3  149   30699    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: leader term: 2
after connect leader1, rf: 0 state: follower term: 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
after disconnect two, rf: 0 state: follower term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: leader term: 2
after 2s, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 5 rf.votedFor 0 candidate: 1 candidate.Term: 4
in func Make: raft is 0 term is 5 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 0 candidate.Term: 6
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor 1 candidate: 0 candidate.Term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor -1 candidate: 1 candidate.Term: 3
in func Make: raft is 0 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: leader term: 2
after connect leader2, rf: 0 state: follower term: 7
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
after connect leader2, leader: 1
  ... Passed --   5.0  3  158   31253    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 2
after connect leader1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
leader2 1
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: candidate term: 5
after 2s, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: leader term: 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 0 candidate.Term: 6
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 5
in func Make: raft is 0 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor 2 candidate: 0 candidate.Term: 4
in func heartbeat2, begin
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: follower term: 7
after connect leader2, rf: 1 state: leader term: 2
in func RequestVote: begin
in func RequestVote: begin
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 7 , state is candidate
in func LeaderElection: rf: 0 term: 7
in func RequestVote: begin
in func RequestVote: begin
after connect leader2, leader: 2
  ... Passed --   5.1  3   74   14010    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 8 , state = candidate case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func RequestVote: begin
in func AppendEntries, begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 2 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term == args.Term and rf has not vote
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor 0 candidate: 1 candidate.Term: 3
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2, leader: 0
  ... Passed --   5.0  3   89   16908    0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 3
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor 1 candidate: 2 candidate.Term: 1
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: false
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term == args.Term and rf has not vote
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor 2 candidate: 1 candidate.Term: 1
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: false
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 2
before disconnect leader1, rf: 1 state: follower term: 2
before disconnect leader1, rf: 2 state: follower term: 2
after disconnect leader1, rf: 0 state: leader term: 2
after disconnect leader1, rf: 1 state: follower term: 2
after disconnect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 2 rf.votedFor -1 candidate: 2 candidate.Term: 4
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 4 rf.votedFor 2 candidate: 2 candidate.Term: 3
in func Make: raft is 1 term is 4 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 4 , state is follower
in func Make: raft is 1 term is 4 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 4 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 4 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 4 vote or not: true become leader
in func Make: raft is 2 term is 4 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 4 leader: 2 leader.Term 4
in func Make: raft is 1 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 4 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 4 leader: 2 leader.Term 4
in func Make: raft is 1 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 4 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 4 leader: 2 leader.Term 4
in func Make: raft is 1 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 4 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 4 leader: 2 leader.Term 4
in func Make: raft is 1 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 4 , state is follower
after connect leader1, rf: 0 state: leader term: 2
after connect leader1, rf: 1 state: follower term: 4
after connect leader1, rf: 2 state: leader term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 4 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 4 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 4 , state is follower
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 4 leader: 2 leader.Term 4
in func Make: raft is 1 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 4 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 4 leader: 2 leader.Term 4
in func Make: outside state, raft is 0 term is 4 , state is follower
in func Make: raft is 0 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 4 , state is follower
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 4 leader: 2 leader.Term 4
in func AppendEntries, begin
in func Make: raft is 0 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 4 , state is follower
in func AppendEntries: rf: 1 rf.term: 4 leader: 2 leader.Term 4
in func Make: raft is 1 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 4 , state is follower
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 4 leader: 2 leader.Term 4
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 4 leader: 2 leader.Term 4
in func Make: raft is 1 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 4 , state is follower
in func Make: raft is 0 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 4 , state is follower
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 4 leader: 2 leader.Term 4
in func Make: raft is 1 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 4 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 4 leader: 2 leader.Term 4
in func Make: raft is 0 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 4 , state is follower
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 4 leader: 2 leader.Term 4
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 4 leader: 2 leader.Term 4
in func Make: raft is 1 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 4 , state is follower
in func Make: raft is 0 term is 4 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 4 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 4
after disconnect two, rf: 1 state: follower term: 4
after disconnect two, rf: 2 state: leader term: 4
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: raft is 1 term is 4 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func Make: raft is 1 term is 4 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func LeaderElection: rf: 1 term: 5
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: raft is 0 term is 4 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func Make: raft is 0 term is 4 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: raft is 1 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: raft is 1 term is 7 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 7 , state is candidate
in func LeaderElection: rf: 1 term: 7
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func Make: raft is 0 term is 7 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 7 , state is candidate
in func LeaderElection: rf: 0 term: 7
in func Make: outside state, raft is 2 term is 4 , state is leader
in func Make: raft is 2 term is 4 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 4
in func heartbeat2, begin
after 2s, rf: 0 state: candidate term: 8
after 2s, rf: 1 state: candidate term: 8
after 2s, rf: 2 state: leader term: 4
after connect leader2 + 1, rf: 0 state: candidate term: 8
after connect leader2 + 1, rf: 1 state: candidate term: 8
after connect leader2 + 1, rf: 2 state: leader term: 4
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 8 rf.votedFor 1 candidate: 0 candidate.Term: 6
in func Make: raft is 1 term is 8 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 8 , state is candidate
in func LeaderElection: rf: 1 term: 8
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 8 rf.votedFor 0 candidate: 1 candidate.Term: 9
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 9 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 9 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 9 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 9 vote or not: true become leader
in func Make: raft is 1 term is 9 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 9 , state is leader
in func Make: raft is 1 term is 9 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 9
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 9 leader: 1 leader.Term 9
in func Make: raft is 0 term is 9 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 9 , state is follower
in func Make: outside state, raft is 1 term is 9 , state is leader
in func Make: raft is 1 term is 9 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 9
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 9 leader: 1 leader.Term 9
in func Make: raft is 0 term is 9 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 9 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 9 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
after connect leader2 + 1, leader: 1
after connect leader2, rf: 0 state: follower term: 9
after connect leader2, rf: 1 state: leader term: 9
after connect leader2, rf: 2 state: leader term: 4
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 9 leader: 2 leader.Term 4
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 9 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 9 , state is follower
in func Make: outside state, raft is 1 term is 9 , state is leader
in func Make: raft is 1 term is 9 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 9
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 9 leader: 1 leader.Term 9
in func Make: raft is 0 term is 9 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 9 , state is follower
in func Make: outside state, raft is 1 term is 9 , state is leader
in func Make: raft is 1 term is 9 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 9
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 9 leader: 1 leader.Term 9
in func Make: raft is 0 term is 9 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 9 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 9 , state is leader
in func Make: raft is 1 term is 9 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 9
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 9 leader: 1 leader.Term 9
in func Make: raft is 0 term is 9 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 9 , state is follower
in func Make: outside state, raft is 1 term is 9 , state is leader
in func Make: raft is 1 term is 9 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 9
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 9 leader: 1 leader.Term 9
in func Make: raft is 0 term is 9 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 9 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 9 rf.votedFor 1 candidate: 0 candidate.Term: 5
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 9 leader: 2 leader.Term 4
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 9 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 9 , state is follower
in func Make: outside state, raft is 1 term is 9 , state is leader
in func Make: raft is 1 term is 9 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 9
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 9 leader: 1 leader.Term 9
in func Make: raft is 0 term is 9 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 9 , state is follower
after connect leader2, leader: 1
  ... Passed --   5.8  3  158   31728    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func heartbeat2, begin
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 9 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 1 candidate.Term: 6
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 5
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.6  3  157   31975    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func Make: raft is 1 term is 1 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func Make: raft is 1 term is 1 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor 2 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 2
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 2
before disconnect leader1, rf: 2 state: follower term: 2
before disconnect leader1, rf: 0 state: follower term: 2
after disconnect leader1, rf: 1 state: leader term: 2
after disconnect leader1, rf: 2 state: follower term: 2
after disconnect leader1, rf: 0 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 2 rf.votedFor -1 candidate: 0 candidate.Term: 3
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 3 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 3 vote or not: true become leader
in func Make: raft is 0 term is 3 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 0 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 3
after connect leader1, rf: 0 state: leader term: 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 0 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: outside state, raft is 1 term is 3 , state is follower
in func Make: raft is 1 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 3 , state is follower
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 0 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 3 leader: 0 leader.Term 3
in func Make: raft is 1 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 3 , state is follower
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 3 leader: 0 leader.Term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 0 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: raft is 1 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 3 , state is follower
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 0 leader.Term 3
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 3 leader: 0 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: raft is 1 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 3 , state is follower
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 0 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 3 leader: 0 leader.Term 3
in func Make: raft is 1 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 3 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 3
after disconnect two, rf: 2 state: follower term: 3
after disconnect two, rf: 0 state: leader term: 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: raft is 1 term is 3 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func Make: raft is 1 term is 3 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 2 term is 3 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: raft is 1 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
after 2s, rf: 1 state: candidate term: 7
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: leader term: 3
after connect leader2 + 1, rf: 1 state: candidate term: 7
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: leader term: 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 1 candidate.Term: 5
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor 1 candidate: 2 candidate.Term: 7
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: false
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is candidate
in func LeaderElection: rf: 1 term: 7
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 1 candidate.Term: 8
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 8 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 8 vote or not: true become leader
in func Make: raft is 1 term is 8 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func Make: raft is 2 term is 8 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func AppendEntries: rf: 2 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 1 leader.Term 8
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 8
after connect leader2, rf: 2 state: follower term: 8
after connect leader2, rf: 0 state: leader term: 3
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 0 leader.Term 3
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func Make: outside state, raft is 0 term is 8 , state is follower
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 1 leader.Term 8
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func Make: raft is 0 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 8 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 8 leader: 0 leader.Term 3
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 8 leader: 0 leader.Term 3
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 0 leader.Term 3
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func AppendEntries, begin
after connect leader2, leader: 1
  ... Passed --   5.1  3  146   29251    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 8 , state = follower case is election timeout
in func Make: raft is 0 term is 8 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 2 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term == args.Term and rf has not vote
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func heartbeat2, begin
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 5 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 5 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 2 candidate.Term: 6
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 6 vote or not: false
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
after connect leader2, leader: 0
  ... Passed --   5.6  3  113   22597    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 0 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term == args.Term and rf has not vote
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 1 candidate.Term: 6
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
after connect leader2, leader: 0
  ... Passed --   5.0  3  115   22808    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 0 leader: 1 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term == args.Term and rf has not vote
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: follower term: 2
after connect leader1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: candidate term: 5
after 2s, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 2
in func heartbeat2, begin
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 2 candidate.Term: 6
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 6 vote or not: false
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: follower term: 7
after connect leader2, rf: 0 state: leader term: 2
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor 1 candidate: 2 candidate.Term: 4
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2, leader: 1
  ... Passed --   4.6  3  119   23607    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 2
after connect leader1, rf: 1 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: candidate term: 5
after 2s, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 5 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 5 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 0 candidate.Term: 6
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func heartbeat2, begin
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: follower term: 7
after connect leader2, rf: 1 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
after connect leader2, leader: 2
  ... Passed --   5.5  3  126   25615    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: leader term: 2
after connect leader1, rf: 1 state: follower term: 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 0
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
after disconnect two, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: leader term: 2
after 2s, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 5
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: leader term: 2
after connect leader2, rf: 1 state: follower term: 7
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 3
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 5
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 6
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
after connect leader2, leader: 2
  ... Passed --   5.0  3  132   26243    0
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 2
after connect leader1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: candidate term: 5
after 2s, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 5 rf.votedFor 0 candidate: 2 candidate.Term: 6
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 6 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 6 vote or not: true become leader
in func Make: raft is 2 term is 6 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 6 , state is leader
in func Make: raft is 2 term is 6 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 6
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 6 leader: 2 leader.Term 6
in func Make: raft is 0 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 6 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 3
in func Make: raft is 0 term is 6 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 6 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 6 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 6
after connect leader2, rf: 0 state: follower term: 6
after connect leader2, rf: 1 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 6 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 6 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 6 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 6 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 6 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 6 , state is follower
after connect leader2, leader: 2
  ... Passed --   5.5  3  149   30427    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 6 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 4
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.5  3   97   19657    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func heartbeat2, begin
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 0 leader: 0 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term == args.Term and rf has not vote
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 3
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.0  3  125   25326    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 2 rf.votedFor 1 candidate: 0 candidate.Term: 2
in func Make: raft is 1 term is 2 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 2 rf.votedFor 0 candidate: 1 candidate.Term: 2
in func LeaderElection: rf: 1 term: 2
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: false
in func Make: raft is 0 term is 2 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 2 rf.votedFor -1 candidate: 1 candidate.Term: 3
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 3 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 3 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 3 vote or not: true become leader
in func Make: raft is 1 term is 3 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 3
after connect leader1, rf: 1 state: leader term: 3
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 3 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 1 leader.Term 3
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 1 leader.Term 3
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 1 leader.Term 3
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
leader2 1
after disconnect two, rf: 2 state: follower term: 3
after disconnect two, rf: 0 state: follower term: 3
after disconnect two, rf: 1 state: leader term: 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: raft is 0 term is 3 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: raft is 2 term is 3 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func Make: raft is 2 term is 3 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func heartbeat2, begin
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
after 2s, rf: 2 state: candidate term: 7
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 3
after connect leader2 + 1, rf: 2 state: candidate term: 7
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 3
in func Make: raft is 2 term is 7 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 7 , state is candidate
in func LeaderElection: rf: 2 term: 7
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 2 candidate.Term: 8
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 8 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 8 vote or not: true become leader
in func Make: raft is 2 term is 8 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 8 , state is leader
in func Make: raft is 2 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 8
in func Make: raft is 0 term is 8 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 8 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 8 leader: 2 leader.Term 8
in func Make: raft is 0 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 8 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 8 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 8 , state is follower
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 8 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 8 , state is follower
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 8
after connect leader2, rf: 0 state: follower term: 8
after connect leader2, rf: 1 state: leader term: 3
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 8 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 8 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 8 leader: 1 leader.Term 3
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 8 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 8 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 8 , state is follower
after connect leader2, leader: 2
  ... Passed --   5.5  3  132   26620    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 8 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: follower term: 2
after connect leader1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: candidate term: 5
after 2s, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 2
in func heartbeat2, begin
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 1 candidate.Term: 4
in func Make: raft is 2 term is 5 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 2 candidate.Term: 6
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 1 candidate.Term: 5
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: follower term: 7
after connect leader2, rf: 0 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
after connect leader2, leader: 1
  ... Passed --   5.5  3  140   28105    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 0 candidate.Term: 3
in func Make: raft is 1 term is 5 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 1 candidate.Term: 6
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 6
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func RequestVote: begin
after connect leader2, leader: 0
  ... Passed --   5.3  3  150   30796    0
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: leader term: 2
after connect leader1, rf: 0 state: follower term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
after disconnect two, rf: 0 state: follower term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: leader term: 2
after 2s, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 0 candidate.Term: 6
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: leader term: 2
after connect leader2, rf: 0 state: follower term: 7
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor 1 candidate: 2 candidate.Term: 2
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2, leader: 1
  ... Passed --   5.0  3  149   29849    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 0 leader: 0 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term == args.Term and rf has not vote
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func heartbeat2, begin
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2, begin
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
leader2 1
after disconnect two, rf: 0 state: leader term: 1
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
after 2s, rf: 0 state: leader term: 1
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 1
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 5 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 5 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 1
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: candidate term: 6
in func AppendEntries, begin
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is candidate
in func LeaderElection: rf: 2 term: 7
in func RequestVote: begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
after connect leader2, leader: 1
  ... Passed --   5.4  3   92   18091    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 8 , state = candidate case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: follower term: 2
after connect leader1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func heartbeat2, begin
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: candidate term: 5
after 2s, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 2 candidate.Term: 3
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: follower term: 7
after connect leader2, rf: 0 state: leader term: 2
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 1 candidate.Term: 4
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2, leader: 1
  ... Passed --   5.5  3  120   24682    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 1 candidate.Term: 6
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 4
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   4.9  3  126   25886    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
in func heartbeat2, begin
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 1 candidate.Term: 6
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 6 vote or not: false
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func RequestVote: begin
in func AppendEntries, begin
after connect leader2, leader: 0
  ... Passed --   5.6  3  127   25736    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 2
after connect leader1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
leader2 1
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 0 candidate.Term: 5
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func heartbeat2, begin
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: follower term: 7
after connect leader2, rf: 1 state: leader term: 2
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 3
in func Make: raft is 0 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
after connect leader2, leader: 2
  ... Passed --   5.0  3   69   12845    0
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: leader term: 2
after connect leader1, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 2
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 0
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
after disconnect two, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: leader term: 2
after 2s, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 5
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 2 candidate.Term: 6
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 6 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 6 vote or not: true become leader
in func Make: raft is 2 term is 6 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 6 , state is leader
in func Make: raft is 2 term is 6 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 6
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 6 leader: 2 leader.Term 6
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is follower
in func Make: raft is 1 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 6 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 6 , state is leader
in func Make: raft is 2 term is 6 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 6
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 6 leader: 2 leader.Term 6
in func Make: raft is 1 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 6 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
in func Make: outside state, raft is 2 term is 6 , state is leader
in func Make: raft is 2 term is 6 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 6
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 6 leader: 2 leader.Term 6
in func Make: raft is 1 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 6 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 6 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 6 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 6
after connect leader2, rf: 0 state: leader term: 2
after connect leader2, rf: 1 state: follower term: 6
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 6 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 6 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 4
in func Make: raft is 1 term is 6 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 6 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 6 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func RequestVote: begin
after connect leader2, leader: 2
  ... Passed --   5.6  3  148   29973    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 1 term is 6 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: leader term: 2
after connect leader1, rf: 0 state: follower term: 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
after disconnect two, rf: 0 state: follower term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: leader term: 2
after 2s, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 0 candidate.Term: 6
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor -1 candidate: 1 candidate.Term: 4
in func Make: raft is 0 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: leader term: 2
after connect leader2, rf: 0 state: follower term: 7
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 2 rf.votedFor 2 candidate: 1 candidate.Term: 4
in func RequestVote: rf.Term < args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 4 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2, leader: 1
  ... Passed --   5.0  3  146   29170    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func heartbeat2, begin
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 2
after connect leader1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: candidate term: 5
after 2s, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: leader term: 2
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 5 rf.votedFor 0 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 6
in func Make: raft is 0 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 4
in func Make: raft is 0 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: follower term: 7
after connect leader2, rf: 1 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func RequestVote: begin
after connect leader2, leader: 2
  ... Passed --   5.0  3   85   15693    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: leader term: 2
after connect leader1, rf: 1 state: follower term: 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 0
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
after disconnect two, rf: 1 state: follower term: 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: leader term: 2
after 2s, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 5
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 1 candidate.Term: 6
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func heartbeat2, begin
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: leader term: 2
after connect leader2, rf: 1 state: follower term: 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 4
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
after connect leader2, leader: 2
  ... Passed --   5.5  3   92   18124    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: follower term: 2
after connect leader1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: candidate term: 5
after 2s, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 2
in func heartbeat2, begin
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 2 candidate.Term: 3
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: follower term: 7
after connect leader2, rf: 0 state: leader term: 2
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 1 candidate.Term: 5
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2, leader: 1
  ... Passed --   5.1  3  130   26287    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 2
after connect leader1, rf: 1 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 1
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: candidate term: 5
after 2s, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 5 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 5 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 0 candidate.Term: 6
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 6 vote or not: false
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: follower term: 7
after connect leader2, rf: 1 state: leader term: 2
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func heartbeat2, begin
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
after connect leader2, leader: 2
  ... Passed --   5.1  3  146   29120    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 2
after connect leader1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 1
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: candidate term: 5
after 2s, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: leader term: 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 0 candidate.Term: 6
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: follower term: 7
after connect leader2, rf: 1 state: leader term: 2
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func heartbeat2, begin
in func AppendEntries, begin
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 4
in func Make: raft is 0 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2, leader: 2
  ... Passed --   5.1  3   90   17016    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: leader term: 2
after connect leader1, rf: 0 state: follower term: 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries, begin
leader2 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
after disconnect two, rf: 0 state: follower term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 1 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
after 2s, rf: 1 state: candidate term: 7
after 2s, rf: 2 state: leader term: 2
after 2s, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 7
after connect leader2 + 1, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
in func Make: raft is 1 term is 7 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 7 , state is candidate
in func LeaderElection: rf: 1 term: 7
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 1 candidate.Term: 8
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 8 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 8 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 8 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 8 vote or not: true become leader
in func Make: raft is 1 term is 8 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 0 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 8 , state is follower
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 0 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 8 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 8
after connect leader2, rf: 2 state: leader term: 2
after connect leader2, rf: 0 state: follower term: 8
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 0 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 8 , state is follower
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 0 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 8 , state is follower
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 0 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 8 , state is follower
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 0 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 8 , state is follower
after connect leader2, leader: 1
  ... Passed --   5.1  3   73   13813    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func heartbeat2, begin
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 8 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 0 candidate.Term: 5
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2 + 1, leader: 2
after connect leader2, rf: 0 state: follower term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: leader term: 7
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor 2 candidate: 0 candidate.Term: 6
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 4
in func Make: raft is 0 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
after connect leader2, leader: 2
  ... Passed --   5.5  3  104   20211    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func heartbeat2, begin
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: leader term: 2
after connect leader1, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 0
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
after disconnect two, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: leader term: 2
after 2s, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 5
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 5 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 5 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 1 candidate.Term: 6
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 6 vote or not: false
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func heartbeat2, begin
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: leader term: 2
after connect leader2, rf: 1 state: follower term: 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor 2 candidate: 1 candidate.Term: 5
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 2
  ... Passed --   5.5  3  169   34551    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func heartbeat2, begin
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func Make: raft is 1 term is 1 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func Make: raft is 1 term is 1 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor 2 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 2
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 2 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 2
before disconnect leader1, rf: 2 state: follower term: 2
before disconnect leader1, rf: 0 state: follower term: 2
after disconnect leader1, rf: 1 state: leader term: 2
after disconnect leader1, rf: 2 state: follower term: 2
after disconnect leader1, rf: 0 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 2 rf.votedFor -1 candidate: 0 candidate.Term: 3
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 3 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 3 vote or not: true become leader
in func Make: raft is 0 term is 3 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 0 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 3
after connect leader1, rf: 0 state: leader term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 0 leader.Term 3
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 3 leader: 0 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: outside state, raft is 1 term is 3 , state is follower
in func Make: raft is 1 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 3 , state is follower
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 0 leader.Term 3
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 3 leader: 0 leader.Term 3
in func Make: raft is 1 term is 3 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: outside state, raft is 1 term is 3 , state is follower
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 0 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 3 leader: 0 leader.Term 3
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: raft is 1 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 3 , state is follower
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 0 leader.Term 3
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 3 leader: 0 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: raft is 1 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 3 , state is follower
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 0 leader.Term 3
in func Make: raft is 2 term is 3 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 3 leader: 0 leader.Term 3
in func Make: outside state, raft is 2 term is 3 , state is follower
in func Make: raft is 1 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 3 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 3
after disconnect two, rf: 2 state: follower term: 3
after disconnect two, rf: 0 state: leader term: 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: raft is 1 term is 3 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func Make: raft is 1 term is 3 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: raft is 2 term is 3 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: raft is 1 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
after 2s, rf: 1 state: candidate term: 7
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: leader term: 3
after connect leader2 + 1, rf: 1 state: candidate term: 7
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: leader term: 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: raft is 1 term is 7 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 7 , state is candidate
in func LeaderElection: rf: 1 term: 7
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 1 candidate.Term: 8
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 8 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 8 vote or not: true become leader
in func Make: raft is 1 term is 8 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 2 term is 8 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func Make: outside state, raft is 0 term is 3 , state is leader
in func Make: raft is 0 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 3
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 8
after connect leader2, rf: 2 state: follower term: 8
after connect leader2, rf: 0 state: leader term: 3
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 8
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 8 leader: 0 leader.Term 3
in func AppendEntries: rf.Term > args.Term
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 0 leader.Term 3
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 1 leader.Term 8
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 1 leader.Term 8
in func AppendEntries, begin
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 0 leader.Term 3
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 0 leader.Term 3
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func Make: outside state, raft is 1 term is 8 , state is leader
in func Make: raft is 1 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 1 leader.Term 8
in func AppendEntries, begin
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 8 leader: 0 leader.Term 3
after connect leader2, leader: 1
  ... Passed --   5.0  3  127   25948    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 8 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: leader term: 2
after connect leader1, rf: 0 state: follower term: 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
after disconnect two, rf: 0 state: follower term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: leader term: 2
after 2s, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 0 candidate.Term: 6
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 6 vote or not: false
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: leader term: 2
after connect leader2, rf: 0 state: follower term: 7
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries, begin
after connect leader2, leader: 1
  ... Passed --   5.5  3  150   30521    0
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor 0 candidate: 1 candidate.Term: 3
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 5
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.0  3  159   32421    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 2
after connect leader1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: candidate term: 5
after 2s, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 0 candidate.Term: 6
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 6 vote or not: false
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func heartbeat2, begin
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: follower term: 7
after connect leader2, rf: 1 state: leader term: 2
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 6
in func Make: raft is 0 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
after connect leader2, leader: 2
  ... Passed --   4.5  3  127   24591    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 2 candidate.Term: 6
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 6 vote or not: false
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func AppendEntries, begin
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 3
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.5  3   90   17409    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func LeaderElection: rf: 2 term: 4
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 2 rf.votedFor 0 candidate: 2 candidate.Term: 3
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 3 rf.votedFor 2 candidate: 2 candidate.Term: 4
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 7 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 7 , state is candidate
in func LeaderElection: rf: 2 term: 7
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 8 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 8 , state is candidate
in func LeaderElection: rf: 2 term: 8
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2, begin
in func Make: raft is 2 term is 9 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 9 , state is candidate
in func LeaderElection: rf: 2 term: 9
in func RequestVote: begin
in func Make: raft is 2 term is 10 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 10 , state is candidate
in func LeaderElection: rf: 2 term: 10
in func RequestVote: begin
in func Make: raft is 2 term is 11 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 11 , state is candidate
in func LeaderElection: rf: 2 term: 11
in func RequestVote: begin
--- FAIL: TestReElection2A (5.94s)
    config.go:338: expected one leader, got none
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 12 , state = candidate case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.0  3  119   23897    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func heartbeat2, begin
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 0 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term == args.Term and rf has not vote
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: leader term: 2
after connect leader1, rf: 0 state: follower term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
after disconnect two, rf: 0 state: follower term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: leader term: 2
after 2s, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 5 rf.votedFor 0 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor 1 candidate: 0 candidate.Term: 4
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func heartbeat2, begin
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: leader term: 2
after connect leader2, rf: 0 state: follower term: 7
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor -1 candidate: 1 candidate.Term: 5
in func Make: raft is 0 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
after connect leader2, leader: 1
  ... Passed --   5.5  3  143   29043    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 3
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term == args.Term and rf has not vote
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.5  3  161   33059    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 2
after connect leader1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 2
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: candidate term: 5
after 2s, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 0 candidate.Term: 6
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 6 vote or not: false
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: follower term: 7
after connect leader2, rf: 1 state: leader term: 2
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor 2 candidate: 0 candidate.Term: 3
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2, leader: 2
  ... Passed --   5.5  3  145   29455    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 2 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term == args.Term and rf has not vote
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func heartbeat2, begin
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 3
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 4
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
after connect leader2, leader: 0
  ... Passed --   5.1  3  122   23784    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 0 leader: 1 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term == args.Term and rf has not vote
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: follower term: 2
after connect leader1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 2 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term == args.Term and rf has not vote
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: candidate term: 5
after 2s, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 5 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 5 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 2 candidate.Term: 6
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 6 vote or not: false
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: follower term: 7
after connect leader2, rf: 0 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
after connect leader2, leader: 1
  ... Passed --   5.6  3  106   21098    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries, begin
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
after 2s, rf: 0 state: candidate term: 7
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: candidate term: 7
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 0 candidate.Term: 3
in func Make: raft is 2 term is 5 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor 0 candidate: 2 candidate.Term: 6
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is candidate
in func LeaderElection: rf: 0 term: 7
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 8
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 8 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 8 vote or not: true become leader
in func Make: raft is 0 term is 8 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 8 , state is leader
in func Make: raft is 0 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 0 leader.Term 8
in func Make: raft is 2 term is 8 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func Make: outside state, raft is 0 term is 8 , state is leader
in func Make: raft is 0 term is 8 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 8
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 0 leader.Term 8
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 8 rf.votedFor 0 candidate: 2 candidate.Term: 5
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func heartbeat2, begin
in func Make: raft is 2 term is 8 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 8
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 8
in func RequestVote: begin
in func RequestVote: begin
after connect leader2, leader: 0
  ... Passed --   5.0  3   88   15816    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 8 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor 0 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 0 candidate.Term: 4
in func Make: raft is 2 term is 5 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 2 candidate.Term: 6
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 6 vote or not: false
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor 0 candidate: 2 candidate.Term: 4
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
after connect leader2, leader: 0
  ... Passed --   5.1  3  128   25839    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 0 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term == args.Term and rf has not vote
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func heartbeat2, begin
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.0  3  135   26902    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 0 leader: 0 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term == args.Term and rf has not vote
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func heartbeat2, begin
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 1 candidate.Term: 6
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 6 vote or not: false
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.1  3  121   24366    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func heartbeat2, begin
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 2 rf.votedFor 2 candidate: 1 candidate.Term: 3
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 3 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 3 vote or not: true become leader
in func Make: raft is 1 term is 3 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 1 leader.Term 3
in func LeaderElection: rf: 1 term: 3
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 3 leader: 1 leader.Term 3
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 3
after connect leader1, rf: 2 state: follower term: 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 3
in func Make: outside state, raft is 0 term is 3 , state is follower
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 3 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 3 leader: 1 leader.Term 3
in func Make: raft is 0 term is 3 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 3 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 3
after disconnect two, rf: 1 state: leader term: 3
after disconnect two, rf: 2 state: follower term: 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: raft is 0 term is 3 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func Make: raft is 0 term is 3 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func Make: outside state, raft is 1 term is 3 , state is leader
in func Make: raft is 1 term is 3 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 3
in func heartbeat2, begin
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
after 2s, rf: 0 state: candidate term: 7
after 2s, rf: 1 state: leader term: 3
after 2s, rf: 2 state: follower term: 3
after connect leader2 + 1, rf: 0 state: candidate term: 7
after connect leader2 + 1, rf: 1 state: leader term: 3
after connect leader2 + 1, rf: 2 state: follower term: 3
in func AppendEntries, begin
in func Make: raft is 0 term is 7 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 7 , state is candidate
in func LeaderElection: rf: 0 term: 7
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func Make: raft is 0 term is 8 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 8 , state is candidate
in func LeaderElection: rf: 0 term: 8
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 9 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 9 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 9 , state is candidate
in func LeaderElection: rf: 0 term: 9
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func Make: raft is 0 term is 10 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 10 , state is candidate
in func LeaderElection: rf: 0 term: 10
in func RequestVote: begin
in func AppendEntries, begin
in func Make: raft is 0 term is 11 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 11 , state is candidate
in func LeaderElection: rf: 0 term: 11
in func RequestVote: begin
in func AppendEntries, begin
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 12 rf.votedFor 0 candidate: 2 candidate.Term: 2
in func Make: raft is 0 term is 12 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 12 , state is candidate
in func LeaderElection: rf: 0 term: 12
in func RequestVote: begin
in func RequestVote: begin
in func Make: raft is 0 term is 13 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 13 , state is candidate
in func LeaderElection: rf: 0 term: 13
in func RequestVote: begin
in func Make: raft is 0 term is 14 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 14 , state is candidate
in func LeaderElection: rf: 0 term: 14
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: begin
in func Make: raft is 0 term is 15 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 15 , state is candidate
in func LeaderElection: rf: 0 term: 15
in func RequestVote: begin
--- FAIL: TestReElection2A (9.57s)
    config.go:338: expected one leader, got none
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 16 , state = candidate case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 0 candidate.Term: 3
in func Make: raft is 1 term is 5 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 1 candidate.Term: 6
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 6 vote or not: false
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func RequestVote: begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 4
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 4
in func AppendEntries, begin
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
after connect leader2, leader: 0
  ... Passed --   5.1  3  131   25336    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor 0 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func heartbeat2, begin
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 6
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 3
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 4
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 1 candidate.Term: 4
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 4
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.0  3  122   24527    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 2
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 2 candidate.Term: 5
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 6 vote or not: false
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func heartbeat2, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.5  3  136   27831    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 3 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func LeaderElection: rf: 1 term: 3
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 3 rf.votedFor -1 candidate: 1 candidate.Term: 3
in func RequestVote: rf.Term == args.Term and rf has not vote
in func Make: raft is 1 term is 4 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 3 rf.votedFor 1 candidate: 1 candidate.Term: 4
in func RequestVote: begin
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2, begin
in func Make: raft is 1 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func Make: raft is 1 term is 7 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 7 , state is candidate
in func LeaderElection: rf: 1 term: 7
in func RequestVote: begin
in func Make: raft is 1 term is 8 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 8 , state is candidate
in func LeaderElection: rf: 1 term: 8
in func RequestVote: begin
in func Make: raft is 1 term is 9 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 9 , state is candidate
in func LeaderElection: rf: 1 term: 9
in func RequestVote: begin
in func Make: raft is 1 term is 10 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 10 , state is candidate
in func LeaderElection: rf: 1 term: 10
in func RequestVote: begin
--- FAIL: TestReElection2A (5.91s)
    config.go:338: expected one leader, got none
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: raft is 1 term is 11 , state = candidate case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: follower term: 2
after connect leader1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: candidate term: 5
after 2s, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 2 candidate.Term: 3
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 1 candidate.Term: 6
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: follower term: 7
after connect leader2, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2, leader: 1
  ... Passed --   4.8  3  128   25420    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: follower term: 2
after connect leader1, rf: 0 state: leader term: 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor 1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: candidate term: 5
after 2s, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 2
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 2 candidate.Term: 6
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: follower term: 7
after connect leader2, rf: 0 state: leader term: 2
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func heartbeat2, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2, leader: 1
  ... Passed --   5.7  3  155   31642    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.1  3  120   24436    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: leader term: 2
after connect leader1, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 0
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
after disconnect two, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: leader term: 2
after 2s, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 1 candidate.Term: 5
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: leader term: 2
after connect leader2, rf: 1 state: follower term: 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
in func RequestVote: begin
after connect leader2, leader: 2
  ... Passed --   5.5  3  136   27370    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 3
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 4
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func heartbeat2, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 6
after connect leader2, leader: 0
  ... Passed --   4.9  3   67   12672    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 5 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 5 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 2 candidate.Term: 6
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 6 vote or not: false
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func RequestVote: begin
after connect leader2, leader: 0
  ... Passed --   4.9  3   80   15968    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func heartbeat2, begin
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 2
after connect leader1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: candidate term: 5
after 2s, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 0 candidate.Term: 6
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 6 vote or not: false
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: follower term: 7
after connect leader2, rf: 1 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term == args.Term and rf has not vote
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2, leader: 2
  ... Passed --   5.0  3  131   26951    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2, begin
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: follower term: 2
after connect leader1, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 2 state: leader term: 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
after 2s, rf: 2 state: leader term: 1
after 2s, rf: 0 state: candidate term: 5
after 2s, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: leader term: 1
after connect leader2 + 1, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: leader term: 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 1
after connect leader2, rf: 0 state: candidate term: 6
after connect leader2, rf: 1 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries, begin
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: begin
after connect leader2, leader: 1
  ... Passed --   5.2  3   89   17798    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 7 , state = candidate case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func heartbeat2, begin
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 1 candidate.Term: 6
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func heartbeat2, begin
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func RequestVote: begin
after connect leader2, leader: 0
  ... Passed --   5.6  3  127   25542    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2, begin
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: leader term: 2
after connect leader1, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
leader2 0
after disconnect two, rf: 2 state: leader term: 1
after disconnect two, rf: 0 state: leader term: 2
after disconnect two, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
after 2s, rf: 2 state: leader term: 1
after 2s, rf: 0 state: leader term: 2
after 2s, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 1
after connect leader2 + 1, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 5
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 1
after connect leader2, rf: 0 state: leader term: 2
after connect leader2, rf: 1 state: candidate term: 6
in func Make: raft is 1 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: begin
after connect leader2, leader: 0
  ... Passed --   5.6  3   83   16616    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 1 term is 7 , state = candidate case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 0 leader: 0 leader.Term 1
in func RequestVote: begin
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term == args.Term and rf has not vote
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2, begin
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: leader term: 1
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func heartbeat2, begin
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
after 2s, rf: 0 state: leader term: 1
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 1
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 1
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: candidate term: 6
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 6 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 6 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: begin
after connect leader2, leader: 1
  ... Passed --   5.1  3   89   17525    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = candidate case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 0 leader: 0 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term == args.Term and rf has not vote
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func heartbeat2, begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: follower term: 7
after connect leader2, rf: 2 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 0 candidate.Term: 5
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 0
  ... Passed --   5.0  3  106   21158    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func heartbeat2, begin
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: follower term: 2
after connect leader1, rf: 2 state: leader term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
leader2 2
after disconnect two, rf: 0 state: leader term: 1
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
after 2s, rf: 0 state: leader term: 1
after 2s, rf: 1 state: candidate term: 5
after 2s, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: leader term: 1
after connect leader2 + 1, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: leader term: 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 1
after connect leader2, rf: 1 state: candidate term: 6
after connect leader2, rf: 2 state: leader term: 2
in func Make: raft is 1 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: begin
after connect leader2, leader: 2
  ... Passed --   5.6  3   85   17301    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: raft is 1 term is 7 , state = candidate case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: follower term: 2
after connect leader1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: candidate term: 5
after 2s, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 2 candidate.Term: 6
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 6 vote or not: false
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor 1 candidate: 2 candidate.Term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor 1 candidate: 2 candidate.Term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: follower term: 7
after connect leader2, rf: 0 state: leader term: 2
in func AppendEntries, begin
in func RequestVote: begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
after connect leader2, leader: 1
  ... Passed --   5.5  3  157   31008    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: follower term: 2
after connect leader1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: candidate term: 5
after 2s, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 2
in func Make: raft is 1 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: follower term: 7
after connect leader2, rf: 0 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func heartbeat2, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries, begin
after connect leader2, leader: 1
  ... Passed --   5.1  3  100   20155    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: leader term: 2
after connect leader1, rf: 1 state: follower term: 2
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
leader2 0
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
after disconnect two, rf: 1 state: follower term: 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: leader term: 2
after 2s, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: leader term: 2
after connect leader2, rf: 1 state: follower term: 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 7 rf.votedFor -1 candidate: 2 candidate.Term: 5
in func Make: raft is 1 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2, leader: 2
  ... Passed --   4.5  3   52    8879    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: leader term: 2
after connect leader1, rf: 0 state: follower term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
after disconnect two, rf: 0 state: follower term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: leader term: 2
after 2s, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 0 candidate.Term: 4
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 5 rf.votedFor 0 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func Make: raft is 0 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor -1 candidate: 1 candidate.Term: 5
in func Make: raft is 0 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: leader term: 2
after connect leader2, rf: 0 state: follower term: 7
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 0 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 7 rf.votedFor -1 candidate: 1 candidate.Term: 6
in func Make: raft is 0 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 7 , state is follower
after connect leader2, leader: 1
  ... Passed --   5.0  3  110   22239    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func heartbeat2, begin
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 7 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 1 , state is candidate
in func LeaderElection: rf: 2 term: 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 1 rf.votedFor -1 candidate: 2 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 2 vote or not: true become leader
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: leader term: 2
after connect leader1, rf: 0 state: follower term: 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 2 leader.Term 2
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is leader
in func Make: raft is 2 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 2
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: leader term: 2
after disconnect two, rf: 0 state: follower term: 2
in func heartbeat2, begin
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 3 , state is candidate
in func LeaderElection: rf: 0 term: 3
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
after 2s, rf: 1 state: follower term: 2
after 2s, rf: 2 state: leader term: 2
after 2s, rf: 0 state: candidate term: 5
after connect leader2 + 1, rf: 1 state: follower term: 2
after connect leader2 + 1, rf: 2 state: leader term: 2
after connect leader2 + 1, rf: 0 state: candidate term: 5
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func RequestVote: begin
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 7 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 7 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 7 , state is candidate
in func LeaderElection: rf: 0 term: 7
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 8 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 8 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 8 , state is candidate
in func LeaderElection: rf: 0 term: 8
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 9 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 0 term is 9 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 9 , state is candidate
in func LeaderElection: rf: 0 term: 9
in func RequestVote: begin
in func RequestVote: begin
in func Make: raft is 0 term is 10 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 10 , state is candidate
in func LeaderElection: rf: 0 term: 10
in func RequestVote: begin
in func Make: raft is 0 term is 11 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 11 , state is candidate
in func LeaderElection: rf: 0 term: 11
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: begin
in func Make: raft is 0 term is 12 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 12 , state is candidate
in func LeaderElection: rf: 0 term: 12
in func RequestVote: begin
in func Make: raft is 0 term is 13 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 13 , state is candidate
in func LeaderElection: rf: 0 term: 13
in func RequestVote: begin
in func Make: raft is 0 term is 14 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 14 , state is candidate
in func LeaderElection: rf: 0 term: 14
in func RequestVote: begin
in func Make: raft is 0 term is 15 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 15 , state is candidate
in func LeaderElection: rf: 0 term: 15
in func RequestVote: begin
--- FAIL: TestReElection2A (9.88s)
    config.go:338: expected one leader, got none
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 0 term is 16 , state = candidate case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: leader term: 2
after connect leader1, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 0
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
after disconnect two, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: leader term: 2
after 2s, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 2 candidate.Term: 5
in func Make: raft is 1 term is 5 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor 2 candidate: 1 candidate.Term: 6
in func Make: raft is 2 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 1 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 7 vote or not: true become leader
in func Make: raft is 2 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 7 , state is leader
in func Make: raft is 2 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 7
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 7
after connect leader2, rf: 0 state: leader term: 2
after connect leader2, rf: 1 state: follower term: 7
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 7 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
after connect leader2, leader: 2
  ... Passed --   5.3  3  128   25203    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 1 term is 7 , state = follower case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: follower term: 2
after connect leader1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: candidate term: 5
after 2s, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 5 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 5 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 2 candidate.Term: 6
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 6 vote or not: false
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 7 rf.votedFor -1 candidate: 1 candidate.Term: 5
in func Make: raft is 2 term is 7 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: follower term: 7
after connect leader2, rf: 0 state: leader term: 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func RequestVote: begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2, leader: 1
  ... Passed --   5.4  3  140   27819    0
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 0 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term == args.Term and rf has not vote
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor 0 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2, begin
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
leader2 1
after disconnect two, rf: 0 state: leader term: 1
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
after 2s, rf: 0 state: leader term: 1
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 1
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 1
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: candidate term: 6
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 6 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 6 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 6 , state is candidate
in func LeaderElection: rf: 2 term: 6
in func RequestVote: begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is candidate
in func LeaderElection: rf: 2 term: 7
in func RequestVote: begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 8 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 8 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 8 , state is candidate
in func LeaderElection: rf: 2 term: 8
in func RequestVote: begin
in func RequestVote: begin
in func RequestVote: begin
after connect leader2, leader: 1
  ... Passed --   5.0  3   77   14659    0
in func Make: outside state, raft is 0 term is 0 , state is follower
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 0 , state is candidate
in func LeaderElection: rf: 1 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 1 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 1
before disconnect leader1, rf: 1 state: leader term: 1
before disconnect leader1, rf: 2 state: follower term: 1
before disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: leader term: 1
after disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: follower term: 1
in func Make: raft is 2 term is 9 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
after connect leader1, rf: 1 state: leader term: 1
after connect leader1, rf: 2 state: follower term: 2
after connect leader1, rf: 0 state: leader term: 2
in func Make: outside state, raft is 1 term is 1 , state is leader
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
leader2 0
after disconnect two, rf: 1 state: follower term: 2
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 5 , state is candidate
in func LeaderElection: rf: 1 term: 5
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
after 2s, rf: 1 state: candidate term: 6
after 2s, rf: 2 state: candidate term: 5
after 2s, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 6
after connect leader2 + 1, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: leader term: 2
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 5 rf.votedFor 2 candidate: 1 candidate.Term: 3
in func Make: raft is 2 term is 5 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor 1 candidate: 2 candidate.Term: 6
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 6 vote or not: false
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is candidate
in func LeaderElection: rf: 1 term: 6
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 1 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 1 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
after connect leader2 + 1, leader: 1
after connect leader2, rf: 1 state: leader term: 7
after connect leader2, rf: 2 state: follower term: 7
after connect leader2, rf: 0 state: leader term: 2
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func AppendEntries, begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func Make: outside state, raft is 1 term is 7 , state is leader
in func Make: raft is 1 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 7
in func AppendEntries, begin
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 7 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
in func AppendEntries, begin
after connect leader2, leader: 1
  ... Passed --   5.1  3  139   27797    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 0 , state is candidate
in func LeaderElection: rf: 0 term: 0
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 0 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 0 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
leader1 0
before disconnect leader1, rf: 0 state: leader term: 1
before disconnect leader1, rf: 1 state: follower term: 1
before disconnect leader1, rf: 2 state: follower term: 1
after disconnect leader1, rf: 0 state: leader term: 1
after disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: follower term: 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 1 , state is candidate
in func LeaderElection: rf: 1 term: 1
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 1 rf.votedFor -1 candidate: 1 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 1 voter: 2 term: 2 vote or not: true become leader
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 1 , state is leader
in func Make: raft is 0 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 1
after connect leader1, rf: 0 state: leader term: 1
after connect leader1, rf: 1 state: leader term: 2
after connect leader1, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 1 leader.Term 2
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 1 leader.Term 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 2 , state is follower
leader2 1
after disconnect two, rf: 0 state: follower term: 2
after disconnect two, rf: 1 state: leader term: 2
after disconnect two, rf: 2 state: follower term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is candidate
in func LeaderElection: rf: 0 term: 2
in func LeaderElection: rf: 0 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 3 , state is candidate
in func LeaderElection: rf: 2 term: 3
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 4 , state is candidate
in func LeaderElection: rf: 0 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 0 term is 5 , state is candidate
in func LeaderElection: rf: 0 term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
after 2s, rf: 0 state: candidate term: 6
after 2s, rf: 1 state: leader term: 2
after 2s, rf: 2 state: candidate term: 5
after connect leader2 + 1, rf: 0 state: candidate term: 6
after connect leader2 + 1, rf: 1 state: leader term: 2
after connect leader2 + 1, rf: 2 state: candidate term: 5
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 5 leader: 0 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 5 , state = candidate case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 6 rf.votedFor 0 candidate: 2 candidate.Term: 6
in func Make: raft is 0 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 0 term is 6 , state is candidate
in func LeaderElection: rf: 0 term: 6
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 6 vote or not: false
in func RequestVote: begin
in func RequestVote: voter: 2 rf.term: 6 rf.votedFor -1 candidate: 0 candidate.Term: 7
in func RequestVote: rf.Term < args.Term
in func Make: raft is 2 term is 7 , state = candidate case is <- voteCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 2 term: 7 vote or not: true become leader
in func Make: raft is 0 term is 7 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 7 , state is leader
in func Make: raft is 0 term is 7 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 0 leader.Term 7
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func heartbeat2, begin
in func Make: outside state, raft is 1 term is 2 , state is leader
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2, begin
after connect leader2 + 1, leader: 0
after connect leader2, rf: 0 state: leader term: 7
after connect leader2, rf: 1 state: leader term: 2
after connect leader2, rf: 2 state: follower term: 7
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 7 leader: 1 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 2 term is 7 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 7 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries, begin
after connect leader2, leader: 0
  ... Passed --   5.6  3  145   29104    0
Test (2A): election after network failure ...
in func Make: outside state, raft is 2 term is 0 , state is follower
in func Make: outside state, raft is 0 term is 0 , state is follower
in func Make: outside state, raft is 1 term is 0 , state is follower
in func Make: raft is 2 term is 7 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 0 , state is candidate
in func LeaderElection: rf: 2 term: 0
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 1 vote or not: true become leader
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func RequestVote: begin
in func RequestVote: voter: 0 rf.term: 0 rf.votedFor -1 candidate: 2 candidate.Term: 1
in func RequestVote: rf.Term < args.Term
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 0 term: 1 vote or not: true become leader
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 1 leader: 2 leader.Term 1
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 1 leader: 2 leader.Term 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 1 , state is follower
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 0 term is 1 , state is follower
leader1 2
before disconnect leader1, rf: 2 state: leader term: 1
before disconnect leader1, rf: 0 state: follower term: 1
before disconnect leader1, rf: 1 state: follower term: 1
after disconnect leader1, rf: 2 state: leader term: 1
after disconnect leader1, rf: 0 state: follower term: 1
after disconnect leader1, rf: 1 state: follower term: 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: outside state, raft is 0 term is 1 , state is candidate
in func LeaderElection: rf: 0 term: 1
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 1 rf.votedFor -1 candidate: 0 candidate.Term: 2
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true
in func LeaderElection's goroutine: rf: 0 voter: 1 term: 2 vote or not: true become leader
in func Make: raft is 0 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 1 , state is leader
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 1
after connect leader1, rf: 2 state: leader term: 1
after connect leader1, rf: 0 state: leader term: 2
after connect leader1, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 1 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func AppendEntries, begin
in func AppendEntries: rf: 2 rf.term: 2 leader: 0 leader.Term 2
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 2 leader: 0 leader.Term 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 2 term is 2 , state is follower
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 2 , state is follower
in func AppendEntries, begin
in func AppendEntries: rf: 0 rf.term: 2 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
leader2 0
after disconnect two, rf: 2 state: follower term: 2
after disconnect two, rf: 0 state: leader term: 2
after disconnect two, rf: 1 state: follower term: 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func Make: outside state, raft is 0 term is 2 , state is leader
in func Make: raft is 0 term is 2 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 0 send heartbeat in term 2
in func heartbeat2, begin
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func Make: raft is 2 term is 2 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 2 , state is candidate
in func LeaderElection: rf: 2 term: 2
in func LeaderElection: rf: 2 term: 3
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: outside state, raft is 1 term is 2 , state is candidate
in func LeaderElection: rf: 1 term: 2
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 4 , state is candidate
in func LeaderElection: rf: 2 term: 4
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 3 , state is candidate
in func LeaderElection: rf: 1 term: 3
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: outside state, raft is 2 term is 5 , state is candidate
in func LeaderElection: rf: 2 term: 5
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: outside state, raft is 1 term is 4 , state is candidate
in func LeaderElection: rf: 1 term: 4
after 2s, rf: 2 state: candidate term: 6
after 2s, rf: 0 state: leader term: 2
after 2s, rf: 1 state: candidate term: 5
after connect leader2 + 1, rf: 2 state: candidate term: 6
after connect leader2 + 1, rf: 0 state: leader term: 2
after connect leader2 + 1, rf: 1 state: candidate term: 5
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 5 rf.votedFor 1 candidate: 2 candidate.Term: 6
in func RequestVote: rf.Term < args.Term
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 6 vote or not: true
in func LeaderElection's goroutine: rf: 2 voter: 1 term: 6 vote or not: true become leader
in func Make: raft is 2 term is 6 , state = candidate case is <- leaderCh
in func Make: outside state, raft is 2 term is 6 , state is leader
in func Make: raft is 2 term is 6 , state = leader
in func heartbeat2, begin
in func heartbeat2: rf 2 send heartbeat in term 6
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 6 leader: 2 leader.Term 6
in func Make: raft is 1 term is 6 , state = candidate case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is follower
in func Make: raft is 1 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 6 , state is follower
in func heartbeat2, begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 6 leader: 2 leader.Term 1
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 6 , state is follower
after connect leader2 + 1, leader: 2
after connect leader2, rf: 2 state: leader term: 6
after connect leader2, rf: 0 state: leader term: 2
after connect leader2, rf: 1 state: follower term: 6
in func RequestVote: begin
in func RequestVote: voter: 1 rf.term: 6 rf.votedFor -1 candidate: 2 candidate.Term: 4
in func Make: raft is 1 term is 6 , state = follower case is <- voteCh
in func Make: outside state, raft is 1 term is 6 , state is follower
in func RequestVote: begin
in func AppendEntries, begin
in func AppendEntries: rf: 1 rf.term: 6 leader: 0 leader.Term 2
in func AppendEntries: rf.Term > args.Term
in func Make: raft is 1 term is 6 , state = follower case is <- appendEntriesCh
in func Make: outside state, raft is 1 term is 6 , state is follower
in func AppendEntries, begin
in func RequestVote: begin
in func RequestVote: begin
after connect leader2, leader: 2
  ... Passed --   5.6  3  107   20839    0
FAIL
exit status 1
FAIL	6.824_new/src/raft	533.077s
