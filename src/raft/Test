Test (2A): initial election ...
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func RequestVote: voter is: 2 rf.term is: 0
in func RequestVote: voter is: 0 rf.term is: 0
in func LeaderElection's goroutine: rf is 1 voter is 2 term is 1 vote or not true
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func LeaderElection's goroutine: rf is 1 voter is 0 term is 1 vote or not true
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
  ... Passed --   3.6  3   64   10484    0
PASS
ok  	6.824_new/src/raft	3.577s
