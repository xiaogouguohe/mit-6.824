Test (2B): basic agreement ...
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func RequestVote: voter is: 0 rf.term is: 0
in func RequestVote: voter is: 2 rf.term is: 0
in func LeaderElection's goroutine: rf is 1 voter is 0 term is 1 vote or not true
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func LeaderElection's goroutine: rf is 1 voter is 2 term is 1 vote or not true
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: before sleep
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
--- FAIL: TestBasicAgree2B (10.04s)
    config.go:478: one(100) failed to reach agreement
Test (2B): RPC byte count ...
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: raft is 2 term is 0 , state = follower case is election timeout
in func RequestVote: voter is: 1 rf.term is: 0
in func LeaderElection's goroutine: rf is 2 voter is 1 term is 1 vote or not true
in func Make: raft is 2 term is 1 , state = candidate case is <- leaderCh
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func sendAppendEntries: server is 0
in func RequestVote: voter is: 0 rf.term is: 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func LeaderElection's goroutine: rf is 2 voter is 0 term is 1 vote or not true
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: before sleep
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 2 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: before sleep
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: before sleep
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: before sleep
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: before sleep
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: before sleep
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 7 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 7 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 8 , state = candidate case is election timeout
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 8 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: before sleep
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 9 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 9 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 10 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 10 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 11 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 11 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 12 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 12 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 13 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: before sleep
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: before sleep
in func Make: raft is 2 term is 13 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 14 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 14 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 15 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 15 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 16 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 16 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
--- FAIL: TestRPCBytes2B (10.04s)
    config.go:478: one(99) failed to reach agreement
Test (2B): agreement despite follower disconnection ...
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 17 , state = candidate case is election timeout
in func Make: raft is 2 term is 17 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func RequestVote: voter is: 0 rf.term is: 0
in func RequestVote: voter is: 2 rf.term is: 0
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func LeaderElection's goroutine: rf is 1 voter is 0 term is 1 vote or not true
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func LeaderElection's goroutine: rf is 1 voter is 2 term is 1 vote or not true
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 18 , state = candidate case is election timeout
in func Make: raft is 2 term is 18 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: before sleep
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = candidate case is election timeout
in func Make: raft is 1 term is 2 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 19 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 19 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 20 , state = candidate case is election timeout
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 20 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 4 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: before sleep
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 21 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 21 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 5 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 22 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func AppendEntries: rf is: 2 rf.term is: 1
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 22 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 6 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 23 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func AppendEntries: rf is: 2 rf.term is: 1
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 23 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 7 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 7 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 24 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 8 , state = candidate case is election timeout
in func Make: raft is 0 term is 24 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 8 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 25 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 26 , state = candidate case is election timeout
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 25 , state = candidate case is election timeout
in func Make: raft is 0 term is 9 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 9 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func heartbeat2: heartbeat receiver is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 26 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 10 , state = candidate case is election timeout
in func Make: raft is 2 term is 27 , state = candidate case is election timeout
in func Make: raft is 0 term is 10 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 27 , state = candidate case is election timeout
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 11 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 28 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 11 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 28 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: before sleep
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 29 , state = candidate case is election timeout
in func Make: raft is 1 term is 12 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 12 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 29 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 30 , state = candidate case is election timeout
in func Make: raft is 1 term is 13 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 13 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 30 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 14 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 14 , state = candidate case is election timeout
in func Make: raft is 2 term is 31 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 31 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 15 , state = candidate case is election timeout
in func Make: raft is 0 term is 15 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 32 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 32 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 16 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 16 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 33 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
--- FAIL: TestFailAgree2B (10.04s)
    config.go:478: one(101) failed to reach agreement
Test (2B): no agreement if too many followers disconnect ...
in func Make: raft is 0 term is 33 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 17 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 17 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 34 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func RequestVote: voter is: 4 rf.term is: 0
in func RequestVote: voter is: 1 rf.term is: 0
in func LeaderElection's goroutine: rf is 0 voter is 4 term is 1 vote or not true
in func Make: raft is 4 term is 1 , state = follower case is <- voteCh
in func RequestVote: voter is: 2 rf.term is: 0
in func LeaderElection's goroutine: rf is 0 voter is 1 term is 1 vote or not true
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func LeaderElection's goroutine: rf is 0 voter is 2 term is 1 vote or not true
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func RequestVote: voter is: 3 rf.term is: 0
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: raft is 0 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func Make: raft is 3 term is 1 , state = follower case is <- voteCh
in func LeaderElection's goroutine: rf is 0 voter is 3 term is 1 vote or not true
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 3 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 4 rf.term is: 1
in func Make: raft is 3 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 18 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 0 term is 34 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 18 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 35 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: raft is 1 term is 1 , state = follower case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func RequestVote: voter is: 3 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 2 , state = follower case is <- voteCh
in func LeaderElection's goroutine: rf is 1 voter is 3 term is 2 vote or not true
in func RequestVote: voter is: 2 rf.term is: 1
in func RequestVote: voter is: 0 rf.term is: 1
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func RequestVote: voter is: 4 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 2 , state = follower case is <- voteCh
in func LeaderElection's goroutine: rf is 1 voter is 2 term is 2 vote or not true
in func Make: raft is 1 term is 2 , state = candidate case is <- leaderCh
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func LeaderElection's goroutine: rf is 1 voter is 4 term is 2 vote or not true
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 35 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 19 , state = candidate case is election timeout
in func Make: raft is 0 term is 2 , state = candidate case is election timeout
in func Make: raft is 0 term is 19 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 36 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 20 , state = candidate case is election timeout
in func Make: raft is 0 term is 36 , state = candidate case is election timeout
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 3 rf.term is: 2
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 20 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: before sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 37 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 37 , state = candidate case is election timeout
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 21 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 21 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 38 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 38 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 22 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 22 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 39 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 39 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 23 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 23 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 40 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 7 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 40 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 7 , state = candidate case is election timeout
in func Make: raft is 0 term is 24 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 24 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 41 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 41 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 8 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 25 , state = candidate case is election timeout
in func Make: raft is 0 term is 25 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 8 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 42 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func AppendEntries: rf is: 3 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 42 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: before sleep
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: raft is 2 term is 9 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 26 , state = candidate case is election timeout
in func Make: raft is 2 term is 43 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 26 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 9 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 10 , state = candidate case is election timeout
in func Make: raft is 0 term is 43 , state = candidate case is election timeout
in func Make: raft is 0 term is 27 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 3
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 3
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: after sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 27 , state = candidate case is election timeout
in func Make: raft is 2 term is 44 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 10 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: before sleep
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 44 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 28 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 11 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 28 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 11 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 45 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 29 , state = candidate case is election timeout
in func Make: raft is 0 term is 45 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 29 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 12 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 12 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 46 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 30 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 13 , state = candidate case is election timeout
in func Make: raft is 0 term is 46 , state = candidate case is election timeout
in func Make: raft is 1 term is 30 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 13 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 3
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 4
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 3 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 47 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 47 , state = candidate case is election timeout
in func Make: raft is 0 term is 31 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 14 , state = candidate case is election timeout
in func Make: raft is 1 term is 31 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 14 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 4
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 48 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 3 rf.term is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 48 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func Make: raft is 1 term is 32 , state = candidate case is election timeout
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 15 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 32 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 15 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 49 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 49 , state = candidate case is election timeout
in func Make: raft is 1 term is 33 , state = candidate case is election timeout
in func Make: raft is 2 term is 16 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 3
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 4 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 3 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 33 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 16 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 3 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 4 rf.term is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func AppendEntries: rf is: 3 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 3 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 50 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
--- FAIL: TestFailNoAgree2B (10.04s)
    config.go:478: one(10) failed to reach agreement
Test (2B): concurrent Start()s ...
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 50 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 34 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 17 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 34 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 2 , state = follower case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 17 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func RequestVote: voter is: 2 rf.term is: 0
in func RequestVote: voter is: 0 rf.term is: 0
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func LeaderElection's goroutine: rf is 1 voter is 2 term is 1 vote or not true
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: raft is 1 term is 1 , state = leader
in func LeaderElection's goroutine: rf is 1 voter is 0 term is 1 vote or not true
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 2 , state = follower case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: raft is 0 term is 51 , state = candidate case is election timeout
in func Make: raft is 2 term is 51 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 18 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 1 term is 35 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 18 , state = candidate case is election timeout
in func Make: raft is 4 term is 3 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 35 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 52 , state = candidate case is election timeout
in func Make: raft is 3 term is 3 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 0 term is 52 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 19 , state = candidate case is election timeout
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 4
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 36 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 19 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 4 , state = candidate case is election timeout
in func Make: raft is 2 term is 53 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 4 , state = candidate case is election timeout
in func Make: raft is 0 term is 36 , state = candidate case is election timeout
in func Make: raft is 0 term is 53 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 20 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 37 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 20 , state = candidate case is election timeout
in func Make: raft is 0 term is 54 , state = candidate case is election timeout
in func Make: raft is 3 term is 5 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 4 term is 5 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: raft is 0 term is 37 , state = candidate case is election timeout
in func Make: raft is 2 term is 54 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 21 , state = candidate case is election timeout
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 38 , state = candidate case is election timeout
in func Make: raft is 0 term is 55 , state = candidate case is election timeout
in func Make: raft is 0 term is 21 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 6 , state = candidate case is election timeout
in func Make: raft is 2 term is 55 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 0 term is 38 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: raft is 3 term is 6 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 22 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 56 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 39 , state = candidate case is election timeout
in func Make: raft is 0 term is 22 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 7 , state = candidate case is election timeout
in func Make: raft is 3 term is 7 , state = candidate case is election timeout
in func Make: raft is 2 term is 7 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 39 , state = candidate case is election timeout
in func Make: raft is 2 term is 56 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 23 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 57 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 40 , state = candidate case is election timeout
in func Make: raft is 4 term is 8 , state = candidate case is election timeout
in func Make: raft is 2 term is 8 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 23 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 8 , state = candidate case is election timeout
in func Make: raft is 2 term is 57 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 40 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: raft is 2 term is 24 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: before sleep
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 58 , state = candidate case is election timeout
in func Make: raft is 4 term is 9 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 9 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 41 , state = candidate case is election timeout
in func Make: raft is 2 term is 58 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 24 , state = candidate case is election timeout
in func Make: raft is 3 term is 9 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 41 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 10 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 10 , state = candidate case is election timeout
in func Make: raft is 2 term is 25 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 59 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func Make: raft is 3 term is 10 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 25 , state = candidate case is election timeout
in func Make: raft is 1 term is 42 , state = candidate case is election timeout
in func Make: raft is 2 term is 59 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: after sleep
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 42 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 11 , state = candidate case is election timeout
in func Make: raft is 4 term is 11 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 26 , state = candidate case is election timeout
in func Make: raft is 0 term is 60 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 43 , state = candidate case is election timeout
in func Make: raft is 2 term is 60 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 26 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 11 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 43 , state = candidate case is election timeout
in func Make: raft is 4 term is 12 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 27 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 12 , state = candidate case is election timeout
in func Make: raft is 0 term is 61 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 61 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 0 term is 27 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 12 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 44 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 13 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 44 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 28 , state = candidate case is election timeout
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 13 , state = candidate case is election timeout
in func Make: raft is 0 term is 62 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 62 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 28 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 13 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 45 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 14 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 45 , state = candidate case is election timeout
in func Make: raft is 2 term is 29 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 63 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 14 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 14 , state = candidate case is election timeout
in func Make: raft is 0 term is 29 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 63 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: raft is 1 term is 46 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 15 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 46 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 30 , state = candidate case is election timeout
in func Make: raft is 0 term is 64 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 30 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 15 , state = candidate case is election timeout
in func Make: raft is 2 term is 64 , state = candidate case is election timeout
in func Make: raft is 2 term is 15 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 47 , state = candidate case is election timeout
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 47 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 4 term is 16 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 65 , state = candidate case is election timeout
in func Make: raft is 2 term is 31 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 16 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 16 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 31 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 65 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 48 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 17 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 48 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 0 term is 66 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 17 , state = candidate case is election timeout
in func Make: raft is 2 term is 32 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 17 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: raft is 0 term is 32 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 66 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 18 , state = candidate case is election timeout
in func Make: raft is 1 term is 49 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 0 term is 67 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 18 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 49 , state = candidate case is election timeout
in func Make: raft is 2 term is 33 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 18 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 33 , state = candidate case is election timeout
in func Make: raft is 2 term is 67 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 19 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 50 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: raft is 2 term is 19 , state = candidate case is election timeout
in func Make: raft is 0 term is 68 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 50 , state = candidate case is election timeout
in func Make: raft is 3 term is 19 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: before sleep
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 2 term is 34 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 34 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: raft is 4 term is 20 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 68 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 20 , state = candidate case is election timeout
in func Make: raft is 0 term is 69 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 1 term is 51 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 3 term is 20 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 35 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 0 term is 51 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 35 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 21 , state = candidate case is election timeout
in func Make: raft is 2 term is 69 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 21 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 70 , state = candidate case is election timeout
in func Make: raft is 1 term is 52 , state = candidate case is election timeout
in func Make: raft is 3 term is 21 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 36 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 36 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 52 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 22 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 70 , state = candidate case is election timeout
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 53 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 22 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 22 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 37 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 71 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 37 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 53 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 4 term is 23 , state = candidate case is election timeout
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 71 , state = candidate case is election timeout
in func Make: raft is 1 term is 54 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 38 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 72 , state = candidate case is election timeout
in func Make: raft is 3 term is 23 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 23 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 38 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 54 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 55 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 72 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 24 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 39 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 24 , state = candidate case is election timeout
in func Make: raft is 0 term is 73 , state = candidate case is election timeout
in func Make: raft is 2 term is 24 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 39 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 55 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 56 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 73 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 25 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 40 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 25 , state = candidate case is election timeout
in func Make: raft is 0 term is 56 , state = candidate case is election timeout
in func Make: raft is 3 term is 25 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 74 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 40 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 57 , state = candidate case is election timeout
in func Make: raft is 2 term is 74 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func Make: before sleep
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 26 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 41 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 26 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 57 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 75 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func AppendEntries: rf is: 2 rf.term is: 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 26 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 58 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 41 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: raft is 4 term is 27 , state = candidate case is election timeout
in func Make: raft is 2 term is 75 , state = candidate case is election timeout
--- FAIL: TestConcurrentStarts2B (15.08s)
    test_test.go:327: term changed too often
Test (2B): rejoin of partitioned leader ...
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 42 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 27 , state = candidate case is election timeout
in func Make: raft is 0 term is 76 , state = candidate case is election timeout
in func Make: raft is 3 term is 27 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 58 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 59 , state = candidate case is election timeout
in func Make: raft is 2 term is 42 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 76 , state = candidate case is election timeout
in func Make: raft is 1 term is 0 , state = follower case is election timeout
in func RequestVote: voter is: 2 rf.term is: 0
in func LeaderElection's goroutine: rf is 1 voter is 2 term is 1 vote or not true
in func Make: raft is 1 term is 1 , state = candidate case is <- leaderCh
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func RequestVote: voter is: 0 rf.term is: 0
in func LeaderElection's goroutine: rf is 1 voter is 0 term is 1 vote or not true
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 28 , state = candidate case is election timeout
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 43 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 28 , state = candidate case is election timeout
in func Make: raft is 0 term is 77 , state = candidate case is election timeout
in func Make: raft is 0 term is 59 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 28 , state = candidate case is election timeout
in func Make: raft is 2 term is 43 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 60 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 77 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 2 , state = candidate case is election timeout
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 29 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 29 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 44 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 44 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 60 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 61 , state = candidate case is election timeout
in func Make: raft is 0 term is 78 , state = candidate case is election timeout
in func Make: raft is 2 term is 78 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 29 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: before sleep
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: before sleep
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: raft is 4 term is 30 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 45 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 30 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 45 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 61 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 79 , state = candidate case is election timeout
in func Make: raft is 2 term is 79 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func Make: raft is 1 term is 62 , state = candidate case is election timeout
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: raft is 3 term is 30 , state = candidate case is election timeout
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 4 term is 31 , state = candidate case is election timeout
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 31 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 46 , state = candidate case is election timeout
in func Make: raft is 0 term is 62 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 46 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 63 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 80 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 80 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: raft is 4 term is 32 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 3 term is 31 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 47 , state = candidate case is election timeout
in func Make: raft is 2 term is 32 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 63 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: raft is 2 term is 47 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 1 term is 64 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 81 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func sendAppendEntries: server is 2
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 81 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 48 , state = candidate case is election timeout
in func Make: raft is 2 term is 33 , state = candidate case is election timeout
in func Make: raft is 0 term is 64 , state = candidate case is election timeout
in func Make: raft is 4 term is 33 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 3 term is 32 , state = candidate case is election timeout
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 48 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func sendAppendEntries: server is 2
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 82 , state = candidate case is election timeout
in func Make: raft is 1 term is 65 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 7 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 82 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: before sleep
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 49 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 34 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 65 , state = candidate case is election timeout
in func Make: raft is 2 term is 34 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: raft is 3 term is 33 , state = candidate case is election timeout
in func Make: raft is 2 term is 7 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 49 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 66 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 83 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 83 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 0 term is 8 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 35 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 50 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 34 , state = candidate case is election timeout
in func Make: raft is 0 term is 66 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 8 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 35 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 67 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 50 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 84 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 84 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 36 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 9 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 9 , state = candidate case is election timeout
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 35 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 0 term is 51 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 67 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 36 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 51 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 68 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 85 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 85 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 37 , state = candidate case is election timeout
in func Make: raft is 0 term is 10 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 10 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 37 , state = candidate case is election timeout
in func Make: raft is 0 term is 52 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 68 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 36 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 69 , state = candidate case is election timeout
in func Make: raft is 2 term is 52 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: before sleep
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 86 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 86 , state = candidate case is election timeout
in func Make: raft is 2 term is 11 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 38 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 11 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 53 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 38 , state = candidate case is election timeout
in func Make: raft is 0 term is 69 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 53 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 37 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 70 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 87 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 12 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: raft is 0 term is 87 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 70 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 12 , state = candidate case is election timeout
in func Make: raft is 0 term is 54 , state = candidate case is election timeout
in func Make: raft is 2 term is 39 , state = candidate case is election timeout
in func Make: raft is 3 term is 38 , state = candidate case is election timeout
in func Make: raft is 1 term is 71 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 39 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 54 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 88 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 13 , state = candidate case is election timeout
in func Make: raft is 0 term is 88 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 40 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: raft is 4 term is 40 , state = candidate case is election timeout
in func Make: raft is 0 term is 13 , state = candidate case is election timeout
in func Make: raft is 0 term is 71 , state = candidate case is election timeout
in func Make: raft is 3 term is 39 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 55 , state = candidate case is election timeout
in func Make: raft is 1 term is 72 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 55 , state = candidate case is election timeout
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 89 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 14 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 89 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 41 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 72 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 41 , state = candidate case is election timeout
in func Make: raft is 0 term is 14 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 40 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: raft is 0 term is 56 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 73 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 56 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: raft is 2 term is 90 , state = candidate case is election timeout
in func Make: after sleep
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 15 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 90 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 42 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: after sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 41 , state = candidate case is election timeout
in func Make: raft is 0 term is 73 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 15 , state = candidate case is election timeout
in func Make: raft is 1 term is 74 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 42 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 57 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 57 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 4
in func Make: raft is 2 term is 91 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 91 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 16 , state = candidate case is election timeout
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 43 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 1
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 74 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 58 , state = candidate case is election timeout
in func Make: raft is 1 term is 75 , state = candidate case is election timeout
in func Make: raft is 3 term is 42 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 43 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 16 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 58 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 92 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: rf 2 send heartbeat in term 1
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 17 , state = candidate case is election timeout
in func Make: raft is 0 term is 92 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
--- FAIL: TestRejoin2B (10.04s)
    config.go:478: one(101) failed to reach agreement
Test (2B): leader backs up quickly over incorrect follower logs ...
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 44 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 59 , state = candidate case is election timeout
in func Make: raft is 0 term is 75 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 44 , state = candidate case is election timeout
in func Make: raft is 3 term is 43 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 1 term is 76 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 17 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 59 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 2
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 18 , state = candidate case is election timeout
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = follower case is election timeout
in func Make: raft is 4 term is 0 , state = follower case is election timeout
in func Make: raft is 2 term is 93 , state = candidate case is election timeout
in func RequestVote: voter is: 1 rf.term is: 0
in func RequestVote: voter is: 3 rf.term is: 0
in func LeaderElection's goroutine: rf is 4 voter is 1 term is 1 vote or not true
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func LeaderElection's goroutine: rf is 4 voter is 3 term is 1 vote or not true
in func Make: raft is 4 term is 1 , state = candidate case is <- leaderCh
in func Make: raft is 4 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 4 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 3
in func Make: raft is 3 term is 1 , state = follower case is <- voteCh
in func RequestVote: voter is: 0 rf.term is: 0
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 1 , state = follower case is <- voteCh
in func RequestVote: voter is: 2 rf.term is: 0
in func LeaderElection's goroutine: rf is 4 voter is 0 term is 1 vote or not true
in func sendAppendEntries: server is 2
in func LeaderElection's goroutine: rf is 4 voter is 2 term is 1 vote or not true
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 0 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 3 rf.term is: 1
in func Make: raft is 3 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 93 , state = candidate case is election timeout
in func Make: after sleep
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 76 , state = candidate case is election timeout
in func Make: raft is 4 term is 45 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 44 , state = candidate case is election timeout
in func Make: raft is 0 term is 18 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 45 , state = candidate case is election timeout
in func Make: raft is 1 term is 77 , state = candidate case is election timeout
in func Make: raft is 0 term is 60 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 60 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 1 , state = follower case is election timeout
in func RequestVote: voter is: 0 rf.term is: 1
in func RequestVote: voter is: 2 rf.term is: 1
in func Make: raft is 0 term is 2 , state = candidate case is election timeout
in func LeaderElection's goroutine: rf is 3 voter is 0 term is 2 vote or not true
in func Make: raft is 0 term is 2 , state = follower case is <- voteCh
in func RequestVote: voter is: 4 rf.term is: 1
in func LeaderElection's goroutine: rf is 3 voter is 2 term is 2 vote or not true
in func Make: raft is 3 term is 2 , state = candidate case is <- leaderCh
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func RequestVote: voter is: 1 rf.term is: 1
in func Make: raft is 2 term is 2 , state = follower case is <- voteCh
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 2 , state = follower case is <- voteCh
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func LeaderElection's goroutine: rf is 3 voter is 1 term is 2 vote or not true
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 4
in func Make: raft is 2 term is 19 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 94 , state = candidate case is election timeout
in func Make: raft is 2 term is 2 , state = candidate case is election timeout
in func Make: raft is 0 term is 94 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 77 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 46 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 46 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 61 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 45 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 78 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 19 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 61 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 20 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: raft is 2 term is 95 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 78 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 95 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 47 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 47 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 46 , state = candidate case is election timeout
in func Make: raft is 1 term is 79 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 62 , state = candidate case is election timeout
in func Make: raft is 2 term is 21 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 62 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 20 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 4 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 1
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 4 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 79 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func sendAppendEntries: server is 0
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 96 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 48 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 48 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 96 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 63 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 63 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 47 , state = candidate case is election timeout
in func Make: raft is 0 term is 5 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 1
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 21 , state = candidate case is election timeout
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 22 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: raft is 1 term is 80 , state = candidate case is election timeout
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 4
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 5 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 80 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 49 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 97 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 97 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 49 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 64 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 81 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 23 , state = candidate case is election timeout
in func Make: raft is 3 term is 48 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 64 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: raft is 0 term is 22 , state = candidate case is election timeout
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 6 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 6 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 81 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 50 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 98 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 82 , state = candidate case is election timeout
in func Make: raft is 0 term is 65 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 98 , state = candidate case is election timeout
in func Make: raft is 2 term is 24 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 4 term is 50 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func Make: raft is 3 term is 49 , state = candidate case is election timeout
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 7 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func sendAppendEntries: server is 1
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 23 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 65 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 82 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 0 term is 7 , state = candidate case is election timeout
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 51 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 1
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 83 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 99 , state = candidate case is election timeout
in func Make: raft is 0 term is 66 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 2
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 99 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 25 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 51 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 66 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 50 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 8 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: raft is 0 term is 83 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 24 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 8 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 52 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 100 , state = candidate case is election timeout
in func Make: raft is 0 term is 67 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: raft is 1 term is 84 , state = candidate case is election timeout
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 26 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 100 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 67 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 25 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 52 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 51 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 84 , state = candidate case is election timeout
in func Make: raft is 2 term is 9 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func Make: raft is 0 term is 9 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 53 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 101 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: raft is 0 term is 68 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 27 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 85 , state = candidate case is election timeout
in func Make: raft is 2 term is 101 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 26 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 68 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 53 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 52 , state = candidate case is election timeout
in func Make: raft is 0 term is 85 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 10 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 10 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 2
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: raft is 0 term is 102 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 1
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 54 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 69 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 28 , state = candidate case is election timeout
in func Make: raft is 2 term is 102 , state = candidate case is election timeout
in func Make: raft is 1 term is 86 , state = candidate case is election timeout
in func Make: raft is 0 term is 86 , state = candidate case is election timeout
in func Make: raft is 2 term is 69 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 27 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 54 , state = candidate case is election timeout
in func Make: raft is 0 term is 11 , state = candidate case is election timeout
in func Make: raft is 3 term is 53 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 11 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 0 term is 103 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 55 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 29 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 1 term is 87 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 70 , state = candidate case is election timeout
in func Make: raft is 2 term is 70 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 103 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 87 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 0 term is 28 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 12 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 54 , state = candidate case is election timeout
in func Make: raft is 4 term is 55 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 12 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 4
in func AppendEntries: rf is: 0 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 104 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 56 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 71 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 71 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 30 , state = candidate case is election timeout
in func Make: raft is 1 term is 88 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 104 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 13 , state = candidate case is election timeout
in func Make: raft is 0 term is 29 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 88 , state = candidate case is election timeout
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 55 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 56 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 105 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 13 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 72 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 72 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 2 term is 57 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 89 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 2
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: before sleep
in func Make: raft is 2 term is 105 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 31 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 2
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 14 , state = candidate case is election timeout
in func Make: raft is 3 term is 56 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 57 , state = candidate case is election timeout
in func Make: raft is 0 term is 30 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 2
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 89 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: raft is 2 term is 14 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 2
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 106 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 73 , state = candidate case is election timeout
in func Make: raft is 2 term is 73 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: after sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: before sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 106 , state = candidate case is election timeout
in func Make: raft is 2 term is 58 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 90 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 32 , state = candidate case is election timeout
in func Make: raft is 0 term is 31 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func Make: before sleep
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 57 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 15 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 58 , state = candidate case is election timeout
in func Make: raft is 2 term is 15 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 1
in func Make: raft is 0 term is 90 , state = candidate case is election timeout
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func Make: before sleep
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 107 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 74 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 74 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: raft is 0 term is 32 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 107 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 59 , state = candidate case is election timeout
in func Make: raft is 1 term is 91 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 58 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 16 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func Make: raft is 2 term is 33 , state = candidate case is election timeout
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 0 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 4 term is 59 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 91 , state = candidate case is election timeout
in func Make: raft is 0 term is 108 , state = candidate case is election timeout
in func Make: raft is 0 term is 16 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 1
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 75 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 75 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func sendAppendEntries: server is 0
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 33 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func AppendEntries: rf is: 1 rf.term is: 2
in func AppendEntries: rf is: 2 rf.term is: 2
in func AppendEntries: rf is: 0 rf.term is: 2
in func Make: raft is 1 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 2 , state = follower case is <- appendEntriesCh
in func Make: raft is 3 term is 59 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
--- FAIL: TestBackup2B (10.04s)
    config.go:478: one(3647072638149337749) failed to reach agreement
Test (2B): RPC counts aren't too high ...
in func Make: raft is 2 term is 108 , state = candidate case is election timeout
in func Make: raft is 1 term is 92 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 60 , state = candidate case is election timeout
in func Make: raft is 2 term is 17 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func sendAppendEntries: server is 2
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 92 , state = candidate case is election timeout
in func Make: raft is 0 term is 17 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 2
in func Make: before sleep
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 34 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 4 term is 60 , state = candidate case is election timeout
in func Make: raft is 0 term is 109 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 76 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 76 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func Make: raft is 1 term is 2 , state = follower case is election timeout
in func Make: raft is 0 term is 2 , state = follower case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 3 term is 60 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 0 , state = follower case is election timeout
in func RequestVote: voter is: 2 rf.term is: 0
in func RequestVote: voter is: 1 rf.term is: 0
in func Make: raft is 2 term is 1 , state = follower case is <- voteCh
in func LeaderElection's goroutine: rf is 0 voter is 2 term is 1 vote or not true
in func Make: raft is 0 term is 1 , state = candidate case is <- leaderCh
in func Make: raft is 1 term is 1 , state = follower case is <- voteCh
in func Make: raft is 0 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func LeaderElection's goroutine: rf is 0 voter is 1 term is 1 vote or not true
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 93 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 2 , state = follower case is election timeout
in func Make: raft is 2 term is 109 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 34 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 0 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 0 term is 18 , state = candidate case is election timeout
in func Make: raft is 0 term is 93 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 61 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 0 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 18 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 110 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 0 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func Make: raft is 4 term is 61 , state = candidate case is election timeout
in func Make: raft is 2 term is 35 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 0 term is 77 , state = candidate case is election timeout
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 77 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 0 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 3 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 0 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func Make: raft is 1 term is 94 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: raft is 3 term is 61 , state = candidate case is election timeout
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 3 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 0 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 3 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 94 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 3
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: raft is 0 term is 35 , state = candidate case is election timeout
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 110 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 0 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func AppendEntries: rf is: 2 rf.term is: 1
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func sendAppendEntries: server is 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 0 term is 19 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 0 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 2
in func Make: raft is 2 term is 62 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 3
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 3
in func Make: raft is 0 term is 111 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 2 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 2 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func sendAppendEntries: server is 1
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 19 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 1 term is 1 , state = leader
in func heartbeat2: rf 1 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func Make: before sleep
in func sendAppendEntries: server is 0
in func Make: raft is 2 term is 78 , state = candidate case is election timeout
in func Make: after sleep
in func Make: raft is 0 term is 1 , state = leader
in func Make: before sleep
in func heartbeat2: rf 0 send heartbeat in term 1
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 1
in func AppendEntries: rf is: 2 rf.term is: 1
in func AppendEntries: rf is: 1 rf.term is: 1
in func Make: raft is 2 term is 1 , state = follower case is <- appendEntriesCh
in func Make: raft is 1 term is 1 , state = follower case is <- appendEntriesCh
in func Make: after sleep
in func Make: raft is 3 term is 2 , state = leader
in func Make: before sleep
in func heartbeat2: rf 3 send heartbeat in term 2
in func heartbeat2: heartbeat receiver is: 0
in func heartbeat2: heartbeat receiver is: 1
in func heartbeat2: heartbeat receiver is: 2
in func heartbeat2: heartbeat receiver is: 4
in func sendAppendEntries: server is 4
in func sendAppendEntries: server is 2
in func sendAppendEntries: server is 0
in func sendAppendEntries: server is 1
--- FAIL: TestCount2B (1.47s)
    test_test.go:497: Start() failed
FAIL
exit status 1
FAIL	6.824_new/src/raft	76.803s
